<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalproject.team4.shouldbe.mapper.ChatMapper">
    <select id="countUserChatRooms" resultType="int">
        SELECT COUNT(*)
        FROM chat_list
        WHERE from_id = #{userId}
           OR to_id = #{userId}
    </select>

    <select id="getCurrentUserChatRooms" resultType="ChatRoomVO">
        select *
        from chat_list
        where from_id = #{userId}
           or to_id = #{userId}
        ORDER BY last_time DESC
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>
    <select id="countUnreadMessages" resultType="int">
        SELECT COUNT(*)
        FROM message
        WHERE chat_id = #{chatId}
          AND is_read = 0
          AND is_from_id != #{isFromId}
    </select>

    <select id="getMessagesByChatId" resultType="MessageVO">
        SELECT *
        FROM message
        WHERE chat_id = #{chatId}
        ORDER BY send_time
    </select>

    <update id="updateMessagesAsRead">
        UPDATE message
        SET is_read = 1
        WHERE chat_id = #{chatId}
          AND is_read = 0
    </update>

    <select id="getProfileImg" resultType="String">
        SELECT profile_img
        FROM users
        WHERE user_id = #{userId}
    </select>

    <insert id="insertMessage" useGeneratedKeys="true" keyProperty="msg_id">
        INSERT INTO message (chat_id, is_from_id, content, is_read)
        VALUES (#{chat_id}, #{is_from_id}, #{content}, 0)
    </insert>

    <update id="insertLastMessage">
        UPDATE chat_list
        SET last_content= #{content},
            last_time   = NOW()
        WHERE chat_id = #{chat_id}
    </update>

    <select id="countUserPartner" resultType="int">
        SELECT COUNT(*)
        FROM users
        WHERE user_id != #{userId}
          AND NOT EXISTS (
            SELECT 1
            FROM chat_list
            WHERE (from_id = #{userId} AND to_id = users.user_id)
           OR (to_id = #{userId} AND from_id = users.user_id)
            )
    </select>

    <select id="getUserPartnerList" resultType="UserVO">
        SELECT user_id AS userid, user_name AS username, email, nation, sex, lang, profile_img, profile_content
        FROM users
        WHERE user_id != #{userId}
          AND NOT EXISTS (
            SELECT 1
            FROM chat_list
            WHERE (from_id = #{userId} AND to_id = users.user_id)
           OR (to_id = #{userId} AND from_id = users.user_id)
            )
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <insert id="createChatRoom" useGeneratedKeys="true" keyProperty="chat_id">
        INSERT INTO chat_list (from_id, to_id, last_content)
        VALUES (#{from_id}, #{to_id},"new chat")
    </insert>
</mapper>